package frameworks.retrofit;import com.universe.villiger.base.model.bean.AddFriendFavourite;import com.universe.villiger.base.model.bean.Address;import com.universe.villiger.base.model.bean.CallItem;import com.universe.villiger.base.model.bean.CardToken;import com.universe.villiger.base.model.bean.InboxItem;import com.universe.villiger.base.model.bean.LoginResponse;import com.universe.villiger.base.model.bean.Message;import com.universe.villiger.base.model.bean.MessageItem;import com.universe.villiger.base.model.bean.ParentProfileUpdatePatch;import com.universe.villiger.base.model.bean.ParentalDetail;import com.universe.villiger.base.model.bean.Review;import com.universe.villiger.base.model.bean.SitterProfileUpdatePatch;import com.universe.villiger.base.model.bean.UserInfo;import com.universe.villiger.base.model.bean.UserType;import com.universe.villiger.parent.model.bean.BookingItem;import com.universe.villiger.parent.model.bean.BookingRequest;import com.universe.villiger.parent.model.bean.HomeFeeds;import com.universe.villiger.parent.model.discover.TinderSwipeListenerImpl;import com.universe.villiger.sitter.model.bean.SitterBookingItem;import java.util.List;import retrofit2.Call;import retrofit2.http.Body;import retrofit2.http.DELETE;import retrofit2.http.Field;import retrofit2.http.FormUrlEncoded;import retrofit2.http.GET;import retrofit2.http.Header;import retrofit2.http.PATCH;import retrofit2.http.POST;import retrofit2.http.PUT;import retrofit2.http.Path;public interface WebServices {    @FormUrlEncoded    @POST("/api/account-login")    Call<LoginResponse> login(@Field("access_token") String token);    //Same api for sitter and parent with type difference    @POST("api/profiles/")    Call<UserInfo> createProfile(@Header("Authorization") String authToken, @Body UserType userType);    @POST("https://android.googleapis.com/gcm/notification")    Call<String> createUserAccount(@Header("Authorization") String token, @Header("project_id") String projectId, @Body String values);    @GET("/api/pictures")    Call<String> getPictures(@Header("Authorization") String token);    @POST("/api/pictures")    Call<String> savePictures(@Header("Authorization") String token);    @POST("/api/pictures/{id}")    Call<String> getPicturesForUser(@Header("Authorization") String token, @Path("id") int id);    @PUT("/api/pictures/{id}")    Call<String> updatePicturesForUser(@Header("Authorization") String token, @Path("id") int id);    @DELETE("/api/pictures/{id}")    Call<String> deletePicturesForUser(@Header("Authorization") String token, @Path("id") int id);    @GET("/api/addresses/{id}")    Call<String> getAddresses(@Header("Authorization") String token, @Path("id") int id);    @DELETE("/api/addresses/{id}")    Call<String> deleteAddresses(@Header("Authorization") String token, @Path("id") int id);    @POST("/api/addresses/")    Call<Address[]> createAddresses(@Header("Authorization") String token, @Body Address address);    @PUT("/api/addresses/{id}")    Call<Address[]> updateAddress(@Header("Authorization") String token, @Body Address address, @Path("id") int id);    @GET("/api/sitters/{id}")    Call<String> getSitter(@Header("Authorization") String token, @Path("id") int id);    @PUT("/api/sitters/{id}")    Call<String> updateSitter(@Header("Authorization") String token, @Path("id") int id);    @GET("/api/sitters/")    Call<String> getSitters(@Header("Authorization") String token);    @POST("/api/sitters/discovery/swipe/")    Call<String> swipeSitters(@Header("Authorization") String token);    @GET("/api/browse/")    Call<List<UserInfo>> discoverSitters(@Header("Authorization") String token);    @GET("/api/me/")    Call<UserInfo> getmyProfile(@Header("Authorization") String token);    @GET("/api/sitters/discovery/matches")    Call<String> discoverSittersMatches(@Header("Authorization") String token);    @PATCH("/api/sitters/{id}/favorite")    Call<String> addFavouriteSitters(@Header("Authorization") String token, @Path("id") String id);    @GET("/api/sitters/bookmarks")    Call<String> getBookMarkSitters(@Header("Authorization") String token, @Path("id") String id);    @GET("/api/payment/customer")    Call<String> getFavouritedSitters(@Header("Authorization") String token);    @POST("/api/me/customer/bank-account")    Call<String> addBaknAccountCustomer(@Header("Authorization") String token);    @GET("/api/me/customer/bank-account")    Call<String> getBankAccons(@Header("Authorization") String token);    @DELETE("/api/me/")    Call<String> deleteAccount(@Header("Authorization") String token);    @PATCH("/api/me/")    Call<UserInfo> updateChildCount(@Header("Authorization") String token, @Body ParentalDetail.ChildCount childCount);    @PATCH("/api/me/")    Call<UserInfo> updateDiscription(@Header("Authorization") String token, @Body ParentalDetail parentalDetail);    @PATCH("/api/me/")    Call<UserInfo> updateParentProfile(@Header("Authorization") String token, @Body ParentProfileUpdatePatch parentalDetail);    @POST("/api/me/customer/source/")    Call<String> updateToken(@Header("Authorization") String token, @Body CardToken stripeToken);    @PATCH("/api/me/")    Call<UserInfo> updateSitterProfile(@Header("Authorization") String token, @Body SitterProfileUpdatePatch sitterDetail);    @POST("/api/bookings/")    Call<BookingItem> reqeustBooking(@Header("Authorization") String token, @Body BookingRequest bookingRequest);    @GET("/api/bookings/")    Call<BookingItem[]> bookingList(@Header("Authorization") String token);    @GET("/api/bookingrequests/")    Call<SitterBookingItem[]> bookingRequestList(@Header("Authorization") String token);    @FormUrlEncoded    @POST("/api/rejects/")    Call<TinderSwipeListenerImpl.BookMark> rejectSitter(@Header("Authorization") String token, @Field("target_id") int id);    @FormUrlEncoded    @POST("/api/bookmarks/")    Call<TinderSwipeListenerImpl.BookMark> bookmarkSitter(@Header("Authorization") String token, @Field("target_id") int id);    @GET("/api/bookmarks/")    Call<List<UserInfo>> getBookMarkSitters(@Header("Authorization") String token);    @GET("/api/me/feed")    Call<HomeFeeds> getHomeFeeds(@Header("Authorization") String token);    @GET("/api/favorites/")    Call<List<UserInfo>> getFavouriteSitters(@Header("Authorization") String token);    @FormUrlEncoded    @POST("/api/favorites/")    Call<AddFriendFavourite> setFavourite(@Header("Authorization") String token, @Field("favorited") boolean favourited, @Field("target_id") Long targetId);    @FormUrlEncoded    @POST("/api/friends/")    Call<AddFriendFavourite> setFriends(@Header("Authorization") String token, @Field("is_friend") boolean favourited, @Field("target_id") Long targetId);    @GET("/api/friends/sitters")    Call<List<UserInfo>> getFriendsSitter(@Header("Authorization") String token);    @GET("/api/friends")    Call<List<UserInfo>> getFriends(@Header("Authorization") String token);    @GET("/api/parents/nearby")    Call<List<UserInfo>> getParentsNearBy(@Header("Authorization") String token);    @GET("api/inbox/calls")    Call<List<CallItem>> getCallingUserDetals(@Header("Authorization") String token);    @GET("/api/users/{id}/relationship")    Call<UserInfo.RelationShip> getRelationShip(@Header("Authorization") String token, @Path("id") String id);    @GET("/api/users/{id}/villagers")    Call<List<UserInfo>> getVillagers(@Header("Authorization") String token, @Path("id") String id);    @GET("/api/profiles/{id}/reviews")    Call<List<Review>> getReviews(@Header("Authorization") String token, @Path("id") String id);    @GET("/api/conversations")    Call<List<InboxItem>> getConversations(@Header("Authorization") String token);    @GET("/api/users/{id}/conversation")    Call<MessageItem> getUserConversation(@Header("Authorization") String token, @Path("id") String id);    @POST("/api/conversations/{id}/read")    Call<String> updateReadStatus(@Header("Authorization") String token, @Path("id") String id);    @POST("/api/users/{id}/messages")    Call<String> postMessage(@Header("Authorization") String token, @Path("id") String id, @Body Message message);}